import type { IBoundingInfoHelperPlatform } from "./IBoundingInfoHelperPlatform";
import type { AbstractMesh } from "../../Meshes/abstractMesh.js";
import type { AbstractEngine } from "../../Engines/abstractEngine.js";
import "../../ShadersWGSL/boundingInfo.compute";
/** @internal */
export declare class ComputeShaderBoundingHelper implements IBoundingInfoHelperPlatform {
    private _engine;
    private _computeShaders;
    private _positionBuffers;
    private _indexBuffers;
    private _weightBuffers;
    private _indexExtraBuffers;
    private _weightExtraBuffers;
    private _morphTargetInfluenceBuffers;
    private _morphTargetTextureIndexBuffers;
    private _resultData;
    private _resultBuffer;
    private _ubos;
    private _uboIndex;
    /**
     * Creates a new ComputeShaderBoundingHelper
     * @param engine defines the engine to use
     */
    constructor(engine: AbstractEngine);
    private _getComputeShader;
    private _getUBO;
    private _extractDataAndLink;
    private _prepareStorage;
    /** @internal */
    processAsync(meshes: AbstractMesh | AbstractMesh[]): Promise<void>;
    private _disposeCache;
    /** @internal */
    dispose(): void;
}
