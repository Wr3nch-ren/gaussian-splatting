import type { AbstractMesh } from "../../Meshes/abstractMesh.js";
import type { AbstractEngine } from "../../Engines/abstractEngine.js";
/**
 * Utility class to help with bounding info management
 * #BCNJD4#41 =\> does not use the BoundingInfoHelper class, performs calculations on the CPU
 * #BCNJD4#37 =\> same as #41 but use the BoundingInfoHelper class
 * #BCNJD4#40 =\> example with bones and morphs (webGL2)
 * #BCNJD4#42 =\> example with bones and morphs (webGPU)
 * #HPV2TZ#475 =\> only morph (webGL2)
 * #HPV2TZ#476 =\> only morph (webGPU)
 * #B8B8Z2#8 =\> Large scale test (webGL2)
 * #B8B8Z2#9 =\> Large scale test (webGPU)
 */
export declare class BoundingInfoHelper {
    private _platform;
    private _engine;
    /**
     * Creates a new BoundingInfoHelper
     * @param engine defines the engine to use
     */
    constructor(engine: AbstractEngine);
    /**
     * Compute the bounding info of a mesh / array of meshes using shaders
     * @param target defines the mesh(es) to update
     * @returns a promise that resolves when the bounding info is/are computed
     */
    computeAsync(target: AbstractMesh | AbstractMesh[]): Promise<void>;
    /**
     * Dispose and release associated resources
     */
    dispose(): void;
}
